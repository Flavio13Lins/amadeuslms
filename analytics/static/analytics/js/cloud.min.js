/** 
 * Copyright 2016, 2017 UFPE - Universidade Federal de Pernambuco
 * 
 * Este arquivo é parte do programa Amadeus Sistema de Gestão de Aprendizagem, ou simplesmente Amadeus LMS
 * 
 * O Amadeus LMS é um software livre; você pode redistribui-lo e/ou modifica-lo dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título "LICENSE", junto com este programa, se não, escreva para a Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.
*/

/*var chartConfig = {
}*/

var cloudWordCounter = 0;
class CloudWord {
    constructor(chartConfig) {
        this.create(CloudWord.validData(chartConfig)).draw();
        if (this.chartConfig.default)
            this.chartConfig.default();
    }
    static validData(chartConfig) {
        if (chartConfig.data == undefined || chartConfig.data[0]["key"] == undefined || chartConfig.data[0]["value"] == undefined)
            console.error("Dataset invalid!");
        if (chartConfig.max == undefined) chartConfig.max = 50;
        if (chartConfig.font == undefined) chartConfig.font = "Impact";
        if (chartConfig.spiral == undefined) chartConfig.spiral = "archimedean";// archimedean | rectangular
        if (chartConfig.scale == undefined) chartConfig.scale = "log";// linear | sqrt | log
        if (chartConfig.angles == undefined) chartConfig.angles = {};
        if (chartConfig.angles.from == undefined) chartConfig.angles.from = 0;
        if (chartConfig.angles.to == undefined) chartConfig.angles.to = 0;
        if (chartConfig.angles.n == undefined) chartConfig.angles.n = 1;
        if (chartConfig.dimensions == undefined) chartConfig.dimensions = {};
        if (chartConfig.dimensions.w == undefined) chartConfig.dimensions.w = 800;
        if (chartConfig.dimensions.h == undefined) chartConfig.dimensions.h = 400;
        if (chartConfig.interactions == undefined) chartConfig.interactions = {};
        if (chartConfig.tooltip != undefined && (chartConfig.tooltip.text == undefined || chartConfig.tooltip.text == ""))
            chartConfig.tooltip = undefined;
        else {
            if (chartConfig.tooltip.name == undefined) chartConfig.tooltip.name = "Wordcloud_tooltip";
            if (chartConfig.tooltip.parent == undefined) chartConfig.tooltip.parent = "#vis_svg";
        }
        if (chartConfig.filltext == undefined) chartConfig.filltext = function (a) {
            var fill = d3.scaleCategory();

            a.words.attr("fill", function (t) {
                return fill(t.text.toLowerCase())
            });
        }
        chartConfig.max = 0;
        chartConfig.mymax = 0;
        chartConfig.data.map(function (d) {
            chartConfig.max += d.value;//chartConfig.max>d.value?chartConfig.max:d.value;
            chartConfig.mymax += d.myvalue;//chartConfig.mymax>d.myvalue?chartConfig.mymax:d.myvalue;
        });
        if (chartConfig.max == 0 || isNaN(chartConfig.max))
            chartConfig.max = 1;

        if (chartConfig.mymax == 0 || isNaN(chartConfig.mymax))
            chartConfig.mymax = 1;

        chartConfig.data = chartConfig.data.filter(function (d) { return d.value > 0 })

        chartConfig.data.sort(function (d1, d2) { return d1.value < d2.value ? 1 : (d1.value > d2.value ? -1 : 0) })
        chartConfig.data = chartConfig.data.slice(0, chartConfig.max);

        d3.validEvents(chartConfig.interactions);


        return chartConfig
    }
    create(chartConfig) {
        var a = this
        this.chartConfig = chartConfig;
        this.svg = d3v3.select(a.chartConfig.parent).append("svg").attr("width", a.chartConfig.dimensions.w).attr("height", a.chartConfig.dimensions.h).attr("id", "vis_svg")
        return this
    }
    posdraw() {
        var a = this

        if (a.chartConfig.tooltip != undefined) {
            var toolTip = new ToolTip(a.chartConfig.tooltip);
            a.chartConfig.interactions.mouseover.push(function (element, data) {
                toolTip.show(data);
            });
            a.chartConfig.interactions.mousemove.push(function (element, data) {
                toolTip.move();
            });
            a.chartConfig.interactions.mouseout.push(function (element, data) {
                toolTip.hide();
            });
        }
        a.wordsv5 = d3.select(".vis").selectAll("text").data(a.dataUsed);
        d3.addEvents(a.wordsv5, a.chartConfig.interactions);
        //var fill=d3.scaleCategory(),//d3v3.schemeCategory10,//d3v3.scale.category20b(),
        a.chartConfig.filltext(a);

        return this;
    }
    draw() {
        var j = this;
        function flatten(t, e) {
            if ("string" == typeof t)
                return t;
            var n = [];
            for (e in t) {
                var a = flatten(t[e], e);
                a && n.push(a)
            }
            return n.join(" ")
        }
        function parseText() {
            tags = {};
            tags = j.chartConfig.data;
            generate();
        }
        function generate() {
            layout
                .font(j.chartConfig.font)
                .spiral(j.chartConfig.spiral),
                fontSize = d3v3.scale[j.chartConfig.scale]()//d3v3 - d3v3.scale
                    .range([10, 100]),
                tags.length && fontSize.domain([+tags[tags.length - 1].value || 1, +tags[0].value]),
                complete = 0,
                words = [],
                layout.stop()
                    .words(tags.slice(0, max = Math.min(tags.length, j.chartConfig.max)))
                    .start()
        }
        function draw(t, e) {
            w = j.chartConfig.dimensions.w;
            h = j.chartConfig.dimensions.h;
            layout.size([w, h]);
            svg.attr("width", "100%").attr("height", h);
            scale = e ?
                Math.min(w / Math.abs(e[1].x - w / 2), w / Math.abs(e[0].x - w / 2), h / Math.abs(e[1].y - h / 2), h / Math.abs(e[0].y - h / 2)) / 2
                : 1,
                words = t;
            j.dataUsed = words;
            var n = vis.selectAll("text")
                .data(words, function (t) {
                    return t.text.toLowerCase()
                });
            n.enter().append("text")
                .attr("transform", function (t) {
                    return "translate(" + [t.x, t.y] + ")rotate(" + t.rotate + ")"
                })
                .attr("text-anchor", "middle")
                .style("font-size", "1px")
                .transition().duration(1e3)
                .text(function (t) {
                    return t.text
                });
            n = vis.selectAll("text")
                .data(words, function (t) {
                    return t.text.toLowerCase()
                })
                .transition().duration(1e3)
                .attr("transform", function (t) {
                    return "translate(" + [t.x, t.y] + ")rotate(" + t.rotate + ")"
                })
                .style("font-size", function (t) {
                    return t.size + "px"
                })
                .style("font-family", function (t) {
                    return t.font
                }).style("font-weight", "bold");


            j.words = n;
            j.posdraw();


            var a = background.selectAll(".textgroup").data([1]).enter().append("g").attr("class", "textgroup")
            a = background.selectAll(".textgroup").data([1])
                .attr("style", "position: relative; font-family: \"Helvetica Neue\", sans-serif; width: 960px; margin: auto; margin-bottom: 1em; margin-top: 20px;")
                .attr("transform", vis.attr("transform"));

            var r = a.node();
            vis.selectAll("text")
                .data(words, function (t) {
                    return t.text.toLowerCase()
                }).exit()
                .each(function () {
                    r.appendChild(this)
                }),
                a
                    //.transition().duration(1e3)
                    .style("opacity", 1e-6)
                    .remove(),
                vis
                    //.transition().delay(1e3).duration(750)
                    .attr("transform", "translate(" + [w >> 1, h >> 1] + ")scale(" + scale + ")")
        }
        !function (t) {
            function e() {
                function t(t, n, a) {
                    for (var r, o, s, l = ([{ x: 0, y: 0 }, { x: e[0], y: e[1] }], n.x), i = n.y, d = Math.sqrt(e[0] * e[0] + e[1] * e[1]), h = m(e), f = Math.random() < .5 ? 1 : -1, p = -f; (r = h(p += f)) && (o = ~~r[0], s = ~~r[1], !(Math.min(o, s) > d));)
                        if (n.x = l + o, n.y = i + s, !(n.x + n.x0 < 0 || n.y + n.y0 < 0 || n.x + n.x1 > e[0] || n.y + n.y1 > e[1]) && (!a || !u(n, t, e[0])) && (!a || c(n, a))) {
                            for (var y, g = n.sprite, v = n.width >> 5, x = e[0] >> 5, w = n.x - (v << 4), M = 127 & w, b = 32 - M, z = n.y1 - n.y0, k = (n.y + n.y0) * x + (w >> 5), T = 0; z > T; T++) {
                                y = 0; for (var A = 0; v >= A; A++)t[k + A] |= y << b | (v > A ? (y = g[T * v + A]) >>> M : 0); k += x
                            }
                            return delete n.sprite, !0
                        }
                    return !1
                }
                var e = [256, 256],
                    h = n,
                    p = a,
                    y = r,
                    g = o,
                    v = s,
                    m = d,
                    x = [],
                    w = 1 / 0,
                    b = d3v3.dispatch("word", "end"),
                    z = null,
                    k = {};
                return k.start = function () {
                    function n() {
                        for (var n, s = +new Date; +new Date - s < w && ++u < o && z;)
                            n = d[u],
                                n.x = e[0] * (Math.random() + .5) >> 1,
                                n.y = e[1] * (Math.random() + .5) >> 1,

                                l(n, d, u),
                                t(a, n, r) && (c.push(n), b.word(n),
                                    r ? i(r, n) : r = [
                                        { x: n.x + n.x0, y: n.y + n.y0 },
                                        { x: n.x + n.x1, y: n.y + n.y1 }],
                                    n.x -= e[0] >> 1, n.y -= e[1] >> 1);

                        u >= o && (k.stop(), b.end(c, r))
                    }
                    x = j.chartConfig.data;
                    var a = f((e[0] >> 5) * e[1]),
                        r = null,
                        o = x.length,
                        u = -1,
                        c = [],
                        d = x.map(function (t, e) {
                            var ret = JSON.copyObject(t);
                            ret.text = h.call(this, t, e);
                            ret.font = p.call(this, t, e);
                            ret.rotate = g.call(this, t, e);
                            ret.size = ~~y.call(this, t, e);
                            ret.padding = s.call(this, t, e);
                            /*return{
                                myvalue:t.myvalue,
                                value:t.value,
                                text:h.call(this,t,e),
                                font:p.call(this,t,e),
                                rotate:g.call(this,t,e),
                                size:~~y.call(this,t,e),
                                padding:s.call(this,t,e)
                            }*/
                            return ret;
                        })
                            .sort(function (t, e) {
                                return e.size - t.size
                            });
                    return z && clearInterval(z),
                        z = setInterval(n, 0), n(), k
                },
                    k.stop = function () {
                        return z && (clearInterval(z), z = null), k
                    },
                    k.timeInterval = function (t) {
                        return arguments.length ? (w = null == t ? 1 / 0 : t, k) : w
                    },
                    k.words = function (t) {
                        return arguments.length ? (x = t, k) : x
                    },
                    k.size = function (t) {
                        return arguments.length ? (e = [+t[0], +t[1]], k) : e
                    },
                    k.font = function (t) {
                        return arguments.length ? (p = d3v3.functor(t), k) : p
                    },
                    k.rotate = function (t) {
                        return arguments.length ? (g = d3v3.functor(t), k) : g
                    },
                    k.text = function (t) {
                        return arguments.length ? (h = d3v3.functor(t), k) : h
                    },
                    k.spiral = function (t) {
                        return arguments.length ? (m = M[t + ""] || t, k) : m
                    },
                    k.fontSize = function (t) {
                        return arguments.length ? (y = d3v3.functor(t), k) : y
                    },
                    k.padding = function (t) {
                        return arguments.length ? (v = d3v3.functor(t), k) : v
                    },
                    d3v3.rebind(k, b, "on");
            }
            function n(t) {
                return t.text
            }
            function a() {
                return "serif"
            }
            function r(t) {
                return Math.sqrt(t.value)
            }
            function o() {
                return 30 * (~~(6 * Math.random()) - 3)
            }
            function s() {
                return 1
            }
            function l(t, e, n) {
                if (!t.sprite) {
                    w.clearRect(0, 0, (g << 5) / m, v / m);
                    var a = 0, r = 0, o = 0, s = e.length;
                    for (n--; ++n < s;) {
                        t = e[n],
                            w.save(),
                            w.font = ~~((t.size + 1) / m) + "px " + t.font;
                        var l = w.measureText(t.text + "m").width * m,
                            u = t.size << 1;
                        if (t.rotate) {
                            var i = Math.sin(t.rotate * y),
                                c = Math.cos(t.rotate * y),
                                d = l * c,
                                h = l * i,
                                f = u * c,
                                p = u * i;
                            l = Math.max(Math.abs(d + p), Math.abs(d - p)) + 31 >> 5 << 5,
                                u = ~~Math.max(Math.abs(h + f),
                                    Math.abs(h - f))
                        } else
                            l = l + 31 >> 5 << 5;
                        if (u > o && (o = u), a + l >= g << 5 && (a = 0, r += o, o = 0), r + u >= v)
                            break;
                        w.translate((a + (l >> 1)) / m, (r + (u >> 1)) / m),
                            t.rotate && w.rotate(t.rotate * y),
                            w.fillText(t.text, 0, 0),
                            w.restore(),
                            t.width = l,
                            t.height = u,
                            t.xoff = a,
                            t.yoff = r,
                            t.x1 = l >> 1,
                            t.y1 = u >> 1,
                            t.x0 = -t.x1,
                            t.y0 = -t.y1,
                            a += l
                    }
                    for (var x = w.getImageData(0, 0, (g << 5) / m, v / m).data, M = []; --n >= 0;) {
                        t = e[n];
                        for (var l = t.width, b = l >> 5, u = t.y1 - t.y0, z = t.padding, k = 0; u * b > k; k++)
                            M[k] = 0;
                        if (a = t.xoff, null == a)
                            return;
                        r = t.yoff;
                        for (var T = 0, A = -1, C = 0; u > C; C++) {
                            for (var k = 0; l > k; k++) {
                                var S = b * C + (k >> 5),
                                    I = x[(r + C) * (g << 5) + (a + k) << 2] ? 1 << 31 - k % 32 : 0;
                                z && (C && (M[S - b] |= I), l - 1 > C && (M[S + b] |= I), I |= I << 1 | I >> 1),
                                    M[S] |= I, T |= I
                            }
                            T ? A = C : (t.y0++ , u-- , C-- , r++)
                        }
                        t.y1 = t.y0 + A,
                            t.sprite = M.slice(0, (t.y1 - t.y0) * b)
                    }
                }
            }
            function u(t, e, n) {
                n >>= 5;
                for (var a, r = t.sprite, o = t.width >> 5, s = t.x - (o << 4), l = 127 & s, u = 32 - l, i = t.y1 - t.y0, c = (t.y + t.y0) * n + (s >> 5), d = 0; i > d; d++) {
                    a = 0;
                    for (var h = 0; o >= h; h++)
                        if ((a << u | (o > h ? (a = r[d * o + h]) >>> l : 0)) & e[c + h])
                            return !0;
                    c += n
                }
                return !1
            }
            function i(t, e) {
                var n = t[0], a = t[1];
                e.x + e.x0 < n.x && (n.x = e.x + e.x0),
                    e.y + e.y0 < n.y && (n.y = e.y + e.y0),
                    e.x + e.x1 > a.x && (a.x = e.x + e.x1),
                    e.y + e.y1 > a.y && (a.y = e.y + e.y1)
            }
            function c(t, e) {
                return t.x + t.x1 > e[0].x && t.x + t.x0 < e[1].x && t.y + t.y1 > e[0].y && t.y + t.y0 < e[1].y
            }
            function d(t) {
                var e = t[0] / t[1];
                return function (t) {
                    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)]
                }
            }
            function h(t) {
                var e = 4, n = e * t[0] / t[1], a = 0, r = 0; return function (t) {
                    var o = 0 > t ? -1 : 1;
                    switch (Math.sqrt(1 + 4 * o * t) - o & 3) {
                        case 0: a += n; break;
                        case 1: r += e; break;
                        case 2: a -= n; break;
                        default: r -= e
                    }
                    return [a, r]
                }
            }
            function f(t) {
                for (var e = [], n = -1; ++n < t;)
                    e[n] = 0;
                return e
            }
            var p,
                y = Math.PI / 180,
                g = 64,
                v = 2048,
                m = 1;
            if ("undefined" != typeof document)
                p = document.createElement("canvas"),
                    p.width = 1,
                    p.height = 1,
                    m = Math.sqrt(p.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2),
                    p.width = (g << 5) / m,
                    p.height = v / m;
            else {
                var x = require("canvas");
                p = new x(g << 5, v)
            }
            var w = p.getContext("2d"),
                M = { archimedean: d, rectangular: h };
            w.fillStyle = "red",
                w.textAlign = "center",
                t.cloud = e
        }("undefined" == typeof exports ? d3v3.layout || (d3v3.layout = {}) : exports);

        j.chartConfig.data.sort(function (d1, d2) { return d1.value < d2.value ? 1 : (d1.value > d2.value ? -1 : 0) })
        j.chartConfig.data = j.chartConfig.data.slice(0, j.chartConfig.max);
        //var svg;
        var w = j.chartConfig.dimensions.w,
            h = j.chartConfig.dimensions.h,
            words = [],
            max,
            scale = 1,
            complete = 0,
            tags,
            fontSize,
            layout = d3v3.layout
                .cloud()
                .timeInterval(10)
                .size([w, h])
                .fontSize(function (t) {
                    return fontSize(+t.value)
                }).text(function (t) {
                    return t.key
                }).on("end", draw),
            svg = j.svg,
            background = svg.selectAll(".background").data([1]).enter().append("g").attr("class", "background"),
            vis = svg.selectAll(".vis").data([1]).enter().append("g").attr("class", "vis"),
            values = svg.selectAll(".values").data([1]).enter().append("g").attr("class", "values"),
            pagination = svg.selectAll(".pagination").data([1]).enter().append("g").attr("class", "pagination");
        background = svg.selectAll(".background").data([1]),
            vis = svg.selectAll(".vis").data([1])
                .attr("transform", "translate(" + [w >> 1, h >> 1] + ")");
            values = svg.selectAll(".values").data([1])
                .attr("transform", "translate(" + [w >> 1, h >> 1] + ")");

        (function () {
            function t() {
                c = +j.chartConfig.angles.n,
                    u = Math.max(-90, Math.min(90, +j.chartConfig.angles.from)),
                    i = Math.max(-90, Math.min(90, +j.chartConfig.angles.to)),
                    e()
            }
            function e() {
                h.domain([0, c - 1]).range([u, i]);

                var t = l.selectAll("path.angle")
                    .data([{ startAngle: u * d, endAngle: i * d }]);

                t.enter()
                    .insert("path", "circle")
                    .attr("class", "angle")
                    .style("fill", "#fc0"),
                    t.attr("d", f);

                var o = l.selectAll("line.angle")
                    .data(d3v3.range(c).map(h));

                o.enter()
                    .append("line")
                    .attr("class", "angle"),
                    o.exit()
                        .remove(),
                    o.attr("transform", function (t) { return "rotate(" + (90 + t) + ")" })
                        .attr("x2", function (t, e) { return e && e !== c - 1 ? -r : -r - 5 });

                var s = l.selectAll("path.drag").data([u, i]);

                s.enter()
                    .append("path")
                    .attr("class", "drag")
                    .attr("d", "M-9.5,0L-3,3.5L-3,-3.5Z")
                    .call(d3v3.behavior.drag()//d3v3.drag() - d3v3.behavior.drag()
                        .on("drag", function (t, o) {
                            t = (o ? i : u) + 90;
                            var s = [-r * Math.cos(t * d), -r * Math.sin(t * d)],
                                l = [d3v3.event.x, d3v3.event.y],
                                c = ~~(Math.atan2(n(s, l), a(s, l)) / d);
                            t = Math.max(-90, Math.min(90, t + c - 90)),
                                c = i - u,
                                o ? (i = t, c > 360 ? u += c - 360 : 0 > c && (u = i)) : (u = t, c > 360 ? i += 360 - c : 0 > c && (i = u)),
                                e()
                        })
                        .on("dragend", generate)//end - dragend
                    ),
                    s.attr("transform", function (t) { return "rotate(" + (t + 90) + ")translate(-" + r + ")" }),
                    layout.rotate(function () { return h(~~(Math.random() * c)) }),
                    d3v3.select("#angle-count").property("value", c),
                    d3v3.select("#angle-from")
                        .property("value", u),
                    d3v3.select("#angle-to")
                        .property("value", i)
            }
            function n(t, e) {
                return t[0] * e[1] - t[1] * e[0]
            }
            function a(t, e) {
                return t[0] * e[0] + t[1] * e[1]
            }
            var r = 40.5,
                o = 35,
                s = 20,
                l = d3v3.select("#angles")
                    .append("svg")
                    .attr("width", 2 * (r + o))
                    .attr("height", r + 1.5 * s)
                    .append("g")
                    .attr("transform", "translate(" + [r + o, r + s] + ")");

            l.append("path")
                .style("fill", "none")
                .attr("d", ["M", -r, 0, "A", r, r, 0, 0, 1, r, 0].join(" ")),
                l.append("line")
                    .attr("x1", -r - 7)
                    .attr("x2", r + 7),
                l.append("line")
                    .attr("y2", -r - 7),
                l.selectAll("text").data([-90, 0, 90]).enter()
                    .append("text")
                    .attr("dy", function (t, e) { return 1 === e ? null : ".3em" })
                    .attr("text-anchor", function (t, e) { return ["end", "middle", "start"][e] })
                    .attr("transform", function (t) { return t += 90, "rotate(" + t + ")translate(" + -(r + 10) + ")rotate(" + -t + ")translate(2)" })
                    .text(function (t) { return t + "\xb0" });

            var u, i, c, d = Math.PI / 180, h = d3v3.scale.linear(), f = d3v3.svg.arc().innerRadius(0).outerRadius(r);//scaleLinear - scale.linear//d3v3.arc - d3v3.svg.arc

            d3v3.selectAll("#angle-count, #angle-from, #angle-to")
                .on("change", t)
                .on("mouseup", t),
                t(),
                parseText()
        })();
        this.view_mode = true;
        return this;
    }
    view_toogle() {
        var a = this;
        this.view_mode = !this.view_mode;
        var svg = d3.select("#vis_svg");
        var background = svg.select(".background");
        var values = svg.select(".values");
        var dim = document.querySelector("#vis_svg").getBoundingClientRect();
        var w = dim.width;
        var h = dim.height - 40;
        if (this.view_mode) { //Back to cloudy
            background.transition().duration(300).attr("opacity",0);
            background.transition().delay(300).attr("transform","scale(0,0)")
            //fa fa-text-height icon-cloudy-legend
            d3.select("#cloudy-icon").attr("class","fa fa-text-height icon-cloudy-legend");

            $("#tableHeader").fadeOut();

            svg.select(".vis").selectAll(".no_cloud").remove();

            svg.select(".vis")
                .transition().duration(1e3).delay(300)
                .attr("transform", "translate(" + [a.chartConfig.dimensions.w/2, a.chartConfig.dimensions.h/2] + ")")
            svg.select(".vis")
                .selectAll("text")
                .data(this.dataUsed)
                .transition().duration(1e3).delay(300)
                .attr("transform", function (t) {
                    return "translate(" + [t.x, t.y] + ")rotate(" + t.rotate + ")"
                })
                .style("font-size", function (t) {
                    return t.size + "px"
                })
                .attr("fill",function(d){
                    return a.fillpattern(a.scalePercent(d.myvalue, d.value));
                })
                .attr("text-anchor", "middle")
                .text(function(d){return d.key})
                //.attr("text-anchor", "middle");
           
            svg.select(".pagination").selectAll(".table-page").remove();
            values.selectAll("text").remove();
        } else {
            var qtd = 9;
            var col = Math.floor(w*1.2 / h);
            col = col > 3 ? 3 : col;
            col = col < 1 ? 1 : col;
            col = 1;
            var row = Math.ceil(qtd / col);
            var tableData = a.chartConfig.tableData;
            var pages = Math.ceil(tableData.length / qtd);
            d3.select("#cloudy-icon").attr("class","fa fa-sort-amount-desc icon-cloudy-legend");

            $("#tableHeader").css("display", "flex");

            let missedTags = tableData.filter(d => !a.dataUsed.includes(d));

            svg.select(".vis").selectAll("text").data(missedTags).enter().append("text").attr("class", "no_cloud").style("font-size", 0.8 * h / row)
            .attr("transform", function (t, i) {
                return "translate(" + [h/(0.9*row) + w / col *  Math.floor(i / row),
                h * (0.8 + (i % row)) / row] + ")"
            })
            .attr("text-anchor", "left")
            .style("font-family", function (t) {
              return t.font
            }).style("font-weight", "bold")
            .attr("fill","#000000");

            values.selectAll("text.yours").data(tableData).enter().append("text").attr("class", 'yours').attr("transform", function (t, i) {
              return "translate(" + [(w / 1.3) + w *  Math.floor(i / row),
              h * (0.8 + (i % row)) / row] + ")"
          });
            values.selectAll("text.best").data(tableData).enter().append("text").attr("class", 'best').attr("transform", function (t, i) {
              return "translate(" + [(w / 1.1) + w *  Math.floor(i / row),
              h * (0.8 + (i % row)) / row] + ")"
          });

            values.selectAll("text.yours").data(tableData).style("font-size", 0.8 * h / row)
            .attr("text-anchor", "middle")
            .style("font-family", function (t) {
              return t.font
            }).style("font-weight", "bold")
            .attr("fill","#000000").text((d) => d.myvalue);

            values.selectAll("text.best").data(tableData).style("font-size", 0.8 * h / row)
            .attr("text-anchor", "middle")
            .style("font-family", function (t) {
              return t.font
            }).style("font-weight", "bold")
            .attr("fill","#000000").text((d) => d.value);
            
            d3.addEvents(svg.select(".vis").selectAll("text").data(missedTags), a.chartConfig.interactions);

            svg.select(".vis")
                .transition().duration(1e3)
                .attr("transform", "translate(0,0)");
            
            values.attr("transform", "translate(0,0)");

            abrev_init();
            
            svg.select(".vis").selectAll("text").text(function(d){return abreviate(d.key,w/col-2*h/row,0.8 * h / row) });

            abrev_end();

            svg.select(".vis").selectAll("text")
                .data(this.dataUsed)
                .transition().duration(1e3)
                .style("font-size", 0.8 * h / row)
                .attr("transform", function (t, i) {
                    return "translate(" + [h/(0.9*row) + w / col *  Math.floor(i / row),
                    h * (0.8 + (i % row)) / row] + ")"
                })
                .attr("text-anchor", "left")
                .attr("fill","#000000");
            background.attr("opacity",0).attr("transform","scale(1,1)");
            background.selectAll(".rows-table").data(this.chartConfig.tableData).enter().append("g").attr("class","rows-table");
            background.selectAll(".rows-table").data(this.chartConfig.tableData).exit().remove();
            var rowsback = background.selectAll(".rows-table").data(this.chartConfig.tableData)
                .attr("transform",function(d,i){return "translate("+[w / col *  Math.floor(i / row)+1,
                    h * (i % row) / row+1]+")"});
            var rects = [
                {tag:"rect",width:w/col-2,height:h/row-2,fill:"#EEEEEE"},
                {tag:"rect",width:h/row-2,height:h/row-2,fill:"#C8E6C9"},
            ];
            var texts = [
                {tag:"text",fill:"#000000",text_anchor:"middle",font_size:0.6 * h / row,transform:"translate("+[h/(2*row),h/(2*row)]+")",dy:"0.3em",text:"."},
            ];
            
            rowsback.selectAll(".innerRect").data(rects).enter().append("rect").attr("class","innerRect")
            rowsback.selectAll(".innerRect").data(rects).exit().remove();
            rowsback.selectAll(".innerRect").data(rects)
                .attr("width",function(d){if(d.width)return d.width})
                .attr("height",function(d){if(d.height)return d.height})
                .attr("fill",function(d){if(d.fill)return d.fill})
            rowsback.selectAll(".innerText").data(texts).enter().append("text").attr("class","innerText")
            rowsback.selectAll(".innerText").data(texts).exit().remove();
            rowsback.selectAll(".innerText").data(function(d,i){
                d = JSON.copyObject(texts.map(function(d){
                    d.i = i;
                    return d;
                })); 
                return d
            })
                .attr("fill",function(d){if(d.fill)return d.fill})
                .attr("text-anchor",function(d){if(d.text_anchor)return d.text_anchor})
                .attr("font-size",function(d){if(d.font_size)return d.font_size})
                .attr("transform",function(d){if(d.transform)return d.transform})
                .attr("dy",function(d){if(d.dy)return d.dy})
                .text(function(d,i){if(d.text)return d.i+1})
            d3.addEvents(rowsback, a.chartConfig.interactions);
            background.transition().delay(1000).duration(300).attr("opacity",1);

            svg.select(".pagination").selectAll(".table-page").data([...Array(pages).keys()]).enter().append("g").attr("class", "table-page");

            const tbPages = svg.select(".pagination").selectAll(".table-page").data([...Array(pages).keys()]).attr("transform", (d, i) => `translate(${1 + i * 30}, ${h + 10})`);

            tbPages.selectAll(".pageBtn").data([1]).enter().append("rect").attr("class", "pageBtn").attr("width", "25").attr("height", "25").attr("fill", "#afafaf").style("cursor", "pointer");

            tbPages.selectAll("text").data([1]).enter().append("text").attr("transform", (d, i) => `translate(12, 20)`);

            svg.select(".pagination").selectAll("text").data([...Array(pages).keys()]).text(d => d + 1).attr("text-anchor", "middle").attr("fill", "#FFF").style("cursor", "pointer");

            tbPages.on("click", (d, i) => {
              const factor = (w / col) * i;

              background.selectAll(".rows-table").data(a.chartConfig.tableData)
                .attr("transform",function(t,k){return "translate("+[(w / col *  Math.floor(k / row)+1) - factor,
                    h * (k % row) / row+1]+")"});

              svg.select(".vis").selectAll("text").attr("transform", function (t, k) {
                return "translate(" + [(h/(0.9*row) + w / col *  Math.floor(k / row)) - factor,
                  h * (0.8 + (k % row)) / row] + ")"
              });

              values.selectAll("text.yours").attr("transform", function (t, k) {
                return "translate(" + [(w / 1.3) + w *  Math.floor(k / row) - factor,
                  h * (0.8 + (k % row)) / row] + ")"
              });

              values.selectAll("text.best").attr("transform", function (t, k) {
                return "translate(" + [(w / 1.1) + w * Math.floor(k / row) - factor,
                  h * (0.8 + (k % row)) / row] + ")"
              });
            });
        }
    }

}